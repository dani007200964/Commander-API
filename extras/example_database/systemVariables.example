EXCLUDE=NONE

++--HEADER--++

/*
 * Created on 2023.Jun.25
 *
 * Copyright (c) 2023 - Daniel Hajnal
 * hajnal.daniel96@gmail.com
 * This file is part of the Commander-API project.
 * Modified {{ YEAR }}.{{ MONTH }}.{{ DAY }}
 *
 * This is a simple example, that demonstrates how
 * to use the base functionality of th Commander-API.
*/

++--INCLUDES--++

// Necessary includes.
#include "Commander-API.hpp"
#include "Commander-IO.hpp"
#include "Commander-Arguments.hpp"

++--GLOBAL_VARIABLES--++

++--FUNCTION_PROTOTYPES--++

++--SETUP--++

// Global system variables.
float reactor = 10.5;
int index = 3;
char text[] = "Hello bello";

// System Variable array. This array will store the
// name and the instance of the system variables.
Commander::SystemVariable_t systemVariables[] = {
    systemVariableFloat( reactor ),
    systemVariableInt( index ),
    systemVariableString( text )
};

// Float argument and its text.
char floatArgumentText[] = "-f $reactor";
Argument floatArgument( floatArgumentText, 'f', "float" );

// Integer argument and its text.
char intArgumentText[] = "-i $index";
Argument intArgument( intArgumentText, 'i', "int" );

// String argument, its text and a buffer for the result.
char stringArgumentText[] = "-s $text";
Argument stringArgument( stringArgumentText, 's', "str" );
char stringArgumentBuffer[ 20 ];

// Attach the system variable array to the command parser.
Commander::attachVariables( systemVariables );

// Try to find and print the system variables by their name.
{{ channel }}.print( __CONST_TXT__( "Value of 'reactor' system variable: " ) );
Commander::printSystemVariable( &{{ channel }}, "reactor" );
{{ channel }}.println();

{{ channel }}.print( __CONST_TXT__( "Value of 'index' system variable: " ) );
Commander::printSystemVariable( &{{ channel }}, "index" );
{{ channel }}.println();

{{ channel }}.print( __CONST_TXT__( "Value of 'text' system variable: " ) );
Commander::printSystemVariable( &{{ channel }}, "text" );
{{ channel }}.println();

// Another way to access system variables is to use Arguments.
// A system variable in the argument string can be accessed with the '$' character.

{{ channel }}.print( __CONST_TXT__( "Parsing float argument '" ) );
{{ channel }}.print( floatArgumentText );
{{ channel }}.print( __CONST_TXT__( "': " ) );
floatArgument.parseFloat();

if( floatArgument ){
    {{ channel }}.println( (float)floatArgument );
}

{{ channel }}.print( __CONST_TXT__( "Parsing int argument '" ) );
{{ channel }}.print( intArgumentText );
{{ channel }}.print( __CONST_TXT__( "': " ) );
intArgument.parseInt();

if( intArgument ){
    {{ channel }}.println( (int)intArgument );
}

{{ channel }}.print( __CONST_TXT__( "Parsing string argument '" ) );
{{ channel }}.print( stringArgumentText );
{{ channel }}.print( __CONST_TXT__( "': " ) );
stringArgument.parseString( stringArgumentBuffer );

if( stringArgument ){
    {{ channel }}.println( (char*)stringArgument );
}

++--LOOP--++

++--FUNCTION_IMPLEMENTATIONS--++

EXCLUDE=NONE

++--HEADER--++

/*
 * Created on 2023.Jun.25
 *
 * Copyright (c) {{ YEAR }} - Daniel Hajnal
 * hajnal.daniel96@gmail.com
 * This file is part of the Commander-API project.
 * Modified {{ YEAR }}.{{ MONTH }}.{{ DAY }}
 *
 * This is a simple example, that demonstrates how
 * to use the base functionality of th Commander-API.
*/

++--INCLUDES--++

// Necessary includes
#include "Commander-API.hpp"
#include "Commander-IO.hpp"
#include "Commander-API-Commands.hpp"
#include <math.h>

++--GLOBAL_VARIABLES--++

// We have to create an object from Commander class.
Commander commander;

// Add echo and env commands to the API tree.
Commander::API_t API_tree[] = {
    API_ELEMENT_REBOOT,
    API_ELEMENT_ECHO,
    API_ELEMENT_ENV,
    API_ELEMENT_EXPORT_TARGET,
    API_ELEMENT_EXPORT,
    API_ELEMENT_MICROS,
    API_ELEMENT_MILLIS,
    API_ELEMENT_UPTIME,
    API_ELEMENT_NEOFETCH,
    API_ELEMENT_PINMODE,
    API_ELEMENT_DIGITALWRITE,
    API_ELEMENT_DIGITALREAD,
    API_ELEMENT_ANALOGREAD,
    API_ELEMENT_ANALOGWRITE,
    API_ELEMENT_SIN,
    API_ELEMENT_COS,
    API_ELEMENT_ABS,
    API_ELEMENT_RANDOM,
    API_ELEMENT_NOT
};

// Global system variables.
float tmpFloat = 0.0;
int tmpInt = 0;

// System Variable array. This array will store the
// name and the instance of the system variables.
Commander::SystemVariable_t systemVariables[] = {
    systemVariableFloat( tmpFloat ),
    systemVariableInt( tmpInt )
};

// This is a buffer to hold the incoming command.
char commandFromSerial[ 30 ];

// This variable tracks the location of the next free
// space in the commandFromSerial buffer.
uint8_t commandIndex = 0;

++--FUNCTION_PROTOTYPES--++

++--SETUP--++

// There is an option to attach a debug channel to Commander.
// It can be handy to find any problems during the initialization
// phase. In this example, we will use {{ channel }} for this.
commander.attachDebugChannel( &{{ channel }} );

// At start, Commander does not know anything about our commands.
// We have to attach the API_tree array from the previous steps
// to Commander to work properly.
commander.attachTree( API_tree );

// Attach the system variable array to the command parser.
Commander::attachVariables( systemVariables );

// After we attached the API_tree, Commander has to initialize
// itself for the fastest runtime possible. It creates a balanced
// binary tree from the API_tree to boost the search speed.
// This part uses some recursion, to make the code space small.
// But recursion is a bit stack hungry, so please initialize
// Commander at the beginning of your code to prevent stack-overlow.
commander.init();

{{ channel }}.println();
{{ channel }}.println( "---- Init Finished ----" );
{{ channel }}.println();

{{ channel }}.println( "Type something" );
{{ channel }}.print( "$: " );

++--LOOP--++

// Check if there is any data incoming.
while( {{ channel }}.available() ){

    // Read the next incoming character.
    char c = {{ channel }}.read();

    // Every command from Serial is terminated with a new-line
    // character. If a new-line character arrives, we have to
    // terminate the string in the commandFromSerial buffer,
    // and execute it. After execution, we have to reset the
    // commandIndex counter to zero.
    if( c == '\r' ){
        commandFromSerial[ commandIndex ] = '\0';
        {{ channel }}.println();
        commander.execute( commandFromSerial, &{{ channel }} );
        commandIndex = 0;
        {{ channel }}.print( "\r\n$: " );
    }

    // If we have a carriage-return character we simply
    // ignore it.
    else if( c == '\n' ){
        continue;
    }

    // Handle backspace events.
    else if( ( c == '\b' ) || ( c == 127 ) ){
        if( commandIndex > 0 ){
            commandIndex--;
            {{ channel }}.print( "\b \b" );
        }
    }

    // Every other case we just put the data to the next
    // free space in the commandFromSerial buffer, increment
    // the commandIndex, and check if it wants to overflow.
    else{
        commandFromSerial[ commandIndex ] = c;
        commandIndex++;
        if( commandIndex >= sizeof( commandFromSerial ) ){
            commandIndex = sizeof( commandFromSerial ) - 1;
        }
        else{
            {{ channel }}.print( c );
        }
    }

}

++--FUNCTION_IMPLEMENTATIONS--++
